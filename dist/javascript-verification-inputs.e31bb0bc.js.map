{"version":3,"sources":["index.js"],"names":["form","document","querySelector","inputs","querySelectorAll","submitBtn","handleInput","e","input","target","nextElementSibling","value","focus","handlePaste","paste","clipboardData","getData","forEach","i","checkStatus","checkSubmission","message","createElement","restart","appendChild","createTextNode","href","addEventListener","location","reload","insertBefore","classList","add","submitForm","handleFocus","select","handleChange","fields","fieldValues","map","indexOf","join"],"mappings":"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","file":"javascript-verification-inputs.e31bb0bc.js","sourceRoot":"..","sourcesContent":["const form = document.querySelector('[name=\"verify\"]');\nconst inputs = form.querySelectorAll('.inputs input');\nconst submitBtn = document.querySelector('input[type=\"submit\"]')\n\nfunction handleInput(e) {\n  // check for data that was inputtted and if there is a next input, focus it\n  const input = e.target;\n  if (input.nextElementSibling && input.value) {\n    input.nextElementSibling.focus();\n  }\n}\n\nfunction handlePaste(e) {\n  const paste = e.clipboardData.getData('text');\n  // loop over each input, and populate with the index of that string\n  inputs.forEach((input, i) => {\n   // console.log(input);\n    input.value = paste[i] || '';\n  });\n  //bail if not all the inputs are full up yet\n  const checkStatus = checkSubmission(inputs)\n  if(!checkStatus){\n    return false\n  }\n  //submit the form and add UI feedback and restart option\n  let message = document.createElement('span');\n  let restart = document.createElement('a');\n  message.appendChild(document.createTextNode('Thankyou :) your code has been received.'));\n  restart.appendChild(document.createTextNode('Try again'));\n  restart.href=\"#\";\n  restart.addEventListener('click', () => location.reload());\n  form.insertBefore(message, submitBtn);\n  form.appendChild(restart);\n  submitBtn.classList.add(\"hide\")\n  submitForm()\n}\n\n//do something clever to make the UI nicer for the viewer!!!\nfunction submitForm() {\n  //don't form.submit() as will lose the ui message instead submit via ajax\n}\n\nconst handleFocus = e => e.target.select()\n\n//check for changes all the time and if all inputs are full focus the submit button\nconst handleChange = (e => {\n  const checkStatus = checkSubmission(inputs)\n  if(!checkStatus){\n    return false\n  }\n  //2. all fields are full focus the submit btn\n  submitBtn.focus()\n})\n\nfunction checkSubmission(fields) {\n  // collect all the values from each input into a list\n  const fieldValues = [...fields].map(i => i.value||null)\n  //if any input is still empty then stop\n  if(fieldValues.indexOf(null) > -1) { \n    return false\n  }\n  // otherwise return all the values as a single string (or number - whatever you want)\n  return fieldValues.join()\n}\n\ninputs[0].addEventListener('paste', handlePaste);\n\n// select text when click into an input field - honestly \nform.addEventListener('focusin', handleFocus);\n\nform.addEventListener('input', handleInput);\n\nform.addEventListener('change', handleChange)\n\n// 1. select the text when the next input is focued\n// 2. Auto submit the form if all fields are filled after a paste\n// 3. support for backspacing from 1 input to another\n"]}